import { Injectable } from '@angular/core';

export interface dayOfTheMonth {
	day: number;
	dayOfTheWeek: number;
	month: number;
	date: Date;
}

@Injectable()
export class DateService {
	private months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

	constructor() {
	}

	private addLeadingZero(value: number): string {
		if (value < 10) {
			return `0${value.toString()}`;
		}
		return value.toString();
	}
	formatByFormatStr(date: Date, formatStr: string): string{
		var o = {
			"M+" : date.getMonth()+1, //月份
			"d+" : date.getDate(), //日
			"h+" : date.getHours()%12 == 0 ? 12 : date.getHours()%12, //小时
			"H+" : date.getHours(), //小时
			"m+" : date.getMinutes(), //分
			"s+" : date.getSeconds(), //秒
			"q+" : Math.floor((date.getMonth()+3)/3), //季度
			"S" : date.getMilliseconds() //毫秒
			};
			var week = {
			"0" : "/u65e5",
			"1" : "/u4e00",
			"2" : "/u4e8c",
			"3" : "/u4e09",
			"4" : "/u56db",
			"5" : "/u4e94",
			"6" : "/u516d"
			};
			if(/(y+)/.test(formatStr)){
				formatStr=formatStr.replace(RegExp.$1, (date.getFullYear()+"").substr(4 - RegExp.$1.length));
			}
			if(/(E+)/.test(formatStr)){
				formatStr=formatStr.replace(RegExp.$1, ((RegExp.$1.length>1) ? (RegExp.$1.length>2 ? "/u661f/u671f" : "/u5468") : "")+week[date.getDay()+""]);
			}
			for(var k in o){
				if(new RegExp("("+ k +")").test(formatStr)){
					formatStr = formatStr.replace(RegExp.$1, (RegExp.$1.length==1) ? (o[k]) : (("00"+ o[k]).substr((""+ o[k]).length)));
				}
			}
			return formatStr;
	}

	formatMobileYYYYMMDD(date: Date): string {
		if (!date || typeof date == 'string') {
			return '';
		}
		return `${date.getFullYear()}-${this.addLeadingZero(date.getMonth() + 1)}-${this.addLeadingZero(date.getDate())}`;
	}
	formatMobileYYYYMMDDTHHMM(date: Date): string {
		if (!date || typeof date == 'string') {
			return '';
		}
		return `${this.formatMobileYYYYMMDD(date)}T${this.addLeadingZero(date.getHours())}:${this.addLeadingZero(date.getMinutes())}`;
	}
	formatMMDDYYYY(date: Date): string {
		if (!date || typeof date == 'string') {
			return '';
		}
		return `${(date.getMonth() + 1)}/${date.getDate()}/${date.getFullYear()}`;
	}


	formatMMDDYYYY_HHMM_AMPM(date: Date): string {
		if (!date || typeof date == 'string') {
			return '';
		}
		const hours = date.getHours();
		const minutes = date.getMinutes();

		return `${this.formatMMDDYYYY(date)} ${this.formatHHMM_AMPM(hours, minutes)}`;
	}

	formatHHMM_AMPM(hour: number, minute: number): string {
		if (hour == null || minute == null) {
			return '';
		}
		let formattedMinute = (!minute ? '00' : (minute <= 9 ? `0${minute}` : minute));

		if (hour > 12) {
			return `${hour - 12}:${formattedMinute} pm`;
		}
		if (hour == 12) {
			return `12:${formattedMinute} pm`;
		}
		if (hour == 0) {
			return `12:${formattedMinute} am`;
		}
		return `${hour}:${formattedMinute} am`;
	}

	getCurrentMonthDays(month: number, year: number): dayOfTheMonth[] {
		let dayOfTheMonth = new Date(year, month - 1, 1);
		let nextMonth = new Date(year, month - 1, 1);

		let returnedDays: dayOfTheMonth[] = [];

		nextMonth.setMonth(nextMonth.getMonth() + 1);

		while (dayOfTheMonth.getMonth() != nextMonth.getMonth()) {
			const dayToAdd = {
				day: dayOfTheMonth.getDate(),
				dayOfTheWeek: dayOfTheMonth.getDay(),
				month: dayOfTheMonth.getMonth() + 1,
				date: new Date((dayOfTheMonth.getMonth() + 1) + '/' + dayOfTheMonth.getDate() + '/' + dayOfTheMonth.getFullYear())

			};
			returnedDays.push(dayToAdd);
			dayOfTheMonth.setDate(dayOfTheMonth.getDate() + 1);
		}
		return returnedDays;
	}

	getDateList(Month: number, Year: number) {
		return [...this.getPreviousMonthDays(Month, Year),
		...this.getCurrentMonthDays(Month, Year),
		...this.getNextMonthDays(Month, Year)];
	}


	getPreviousMonthDays(Month: number, Year: number): dayOfTheMonth[] {
		let day = new Date(Month + '/1/' + Year);
		let returnedDays: dayOfTheMonth[] = [];

		let dayOfTheWeek = day.getDay();

		while (dayOfTheWeek != 0) {
			day.setDate(day.getDate() - 1);
			returnedDays = [{
				day: day.getDate(),
				dayOfTheWeek: day.getDay(),
				month: day.getMonth() + 1,
				date: new Date((day.getMonth() + 1) + '/' + day.getDate() + '/' + day.getFullYear())
			}, ...returnedDays];
			dayOfTheWeek = day.getDay();
		}

		return returnedDays;
	}

	getNextMonthDays(Month: number, Year: number): dayOfTheMonth[] {
		let day = new Date(Month + '/1/' + Year);
		day.setMonth(day.getMonth() + 1);
		day.setDate(day.getDate() - 1);

		let returnedDays: dayOfTheMonth[] = [];

		let dayOfTheWeek = day.getDay();

		while (dayOfTheWeek != 6) {
			day.setDate(day.getDate() + 1);

			returnedDays = [...returnedDays, {
				day: day.getDate(),
				dayOfTheWeek: day.getDay(),
				month: day.getMonth() + 1,
				date: new Date((day.getMonth() + 1) + '/' + day.getDate() + '/' + day.getFullYear())
			}];
			dayOfTheWeek = day.getDay();
		}

		return returnedDays;
	}

	getMonths(): string[] {
		return this.months;
	}

	getMonthText(date: Date): string {
		if (date == null) {
			date = new Date();
		}
		return this.months[date.getMonth()];
	}

	getAvailableYears(): number[] {
		const currentYear = new Date().getFullYear();
		let startYear = currentYear - 80;
		let returnYears: number[] = [];

		while (startYear <= (currentYear + 5)) {
			returnYears.push(startYear);
			startYear = startYear + 1;
		}
		return returnYears;
	}
}